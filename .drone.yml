---
kind: pipeline
name: AppDaemon

trigger:
  branch:
    - master
    - feature/*

steps:
  - name: Linting & Typing
    image: python:3
    commands:
      - pip3 install --upgrade pip black flake8 mypy pylint yamllint
      - black --check --fast ./appdaemon/settings/apps/
      - flake8 ./appdaemon/settings/apps/
      - mypy --ignore-missing-imports ./appdaemon/settings/apps/
      - pylint --rcfile ./appdaemon/settings/pylintrc appdaemon/settings/apps/
      - yamllint ./appdaemon/settings/

---
kind: pipeline
name: ESPHome

trigger:
  branch:
    - master
    - feature/*

steps:
  - name: "Config Check: Beta"
    image: esphome/esphome:beta
    pull: always
    failure: ignore
    commands:
      - "for file in $(find /drone/src/esphome -type f -name \"*.yaml\" -not \
         -name \"secrets.yaml\"); do esphome \"$file\" config; done"
  - name: "Config Check: Latest"
    image: esphome/esphome:latest
    pull: always
    commands:
      - "for file in $(find /drone/src/esphome -type f -name \"*.yaml\" -not \
         -name \"secrets.yaml\"); do esphome \"$file\" config; done"
  - name: Linting
    image: python:3
    commands:
      - pip3 install --upgrade pip yamllint
      - yamllint ./esphome/

---
kind: pipeline
name: Home Assistant

trigger:
  branch:
    - master
    - feature/*

steps:
  - name: "Config Check: Dev"
    image: homeassistant/home-assistant:dev
    pull: always
    failure: ignore
    commands:
      - cd /usr/src/homeassistant
      - "python -m homeassistant -c /drone/src/home-assistant/settings \
         --script check_config"
  - name: "Config Check: Latest"
    image: homeassistant/home-assistant:latest
    pull: always
    commands:
      - cd /usr/src/homeassistant
      - "python -m homeassistant -c /drone/src/home-assistant/settings \
         --script check_config"
  - name: "Config Check: RC"
    image: homeassistant/home-assistant:rc
    pull: always
    commands:
      - cd /usr/src/homeassistant
      - "python -m homeassistant -c /drone/src/home-assistant/settings \
         --script check_config"
  - name: Linting
    image: python:3
    commands:
      - pip3 install --upgrade pip yamllint
      - yamllint ./home-assistant/settings/

---
kind: pipeline
name: NGINX

trigger:
  branch:
    - master
    - feature/*

steps:
  - name: "Config Check: NGINX"
    image: alpine:3.10.1
    commands:
      - apk update && apk add --no-cache nginx
      - ln -s /drone/src/nginx/settings/nginx /etc/nginx
      - nginx -t -c /etc/nginx/nginx.conf -g 'pid /tmp/nginx.pid; daemon off;'
  - name: "Config Check: Fail2Ban"
    image: alpine:3.10.1
    commands:
      - apk update && apk add --no-cache fail2ban
      - ln -s ./fail2ban/settings /etc/fail2ban
      - touch /var/log/messages
      - "mkdir -p /var/log/nginx && touch /var/log/nginx/access.log \
         && touch /var/log/nginx/error.log"
      - fail2ban-client -t
  - name: "Static Analysis: NGINX"
    image: yandex/gixy:latest
    pull: always
    commands:
      - ln -s /drone/src/nginx/settings/nginx /etc/nginx
      - gixy /etc/nginx/nginx.conf

---
kind: pipeline
name: Shell Scripts

trigger:
  branch:
    - master
    - feature/*

steps:
  - name: "Static Analysis: bin/*"
    image: koalaman/shellcheck-alpine:stable
    pull: always
    commands:
      - shellcheck --version
      - shellcheck ./bin/*

---
kind: pipeline
name: Wrap-up

trigger:
  branch:
    - master
    - feature/*
  status:
    - failure
    - success

depends_on:
  - AppDaemon
  - ESPHome
  - Home Assistant
  - NGINX
  - Shell Scripts

steps:
  - name: Send Notification
    image: plugins/slack
    settings:
      webhook:
        from_secret: slack_webhook
      channel:
        from_secret: slack_channel_name
      template: >
        {{#success build.status}}
          `{{repo.name}}/{{build.branch}}`: Build #{{build.number}} successful
        {{else}}
          `{{repo.name}}/{{build.branch}}`: Build #{{build.number}} failed
        {{/success}}
    when:
      status:
        - failure
        - success
