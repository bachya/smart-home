---
version: "3"

services:

  ecowitt2mqtt:
    container_name: ecowitt2mqtt
    depends_on:
      - vernemq
    environment:
      HASS_DISCOVERY: "true"
      MQTT_BROKER: vernemq
      MQTT_PASSWORD: "${VERNEMQ_PASSWORD_ECOWITT}"
      MQTT_USERNAME: ecowitt
    image: "bachya/ecowitt2mqtt:${ECOWITT2MQTT_VERSION}"
    ports:
      - "8080:8080/tcp"
    restart: always

  esphome:
    container_name: esphome
    depends_on:
      - traefik
    image: "esphome/esphome:${ESPHOME_VERSION}"
    network_mode: host
    ports:
      - "6052:6052/tcp"
    restart: always
    volumes:
      - ./esphome:/config

  fail2ban:
    cap_add:
      - NET_ADMIN
      - NET_RAW
    container_name: fail2ban
    environment:
      F2B_DB_PURGE_AGE: 1d
      F2B_MAX_RETRY: 3
      TZ: America/Denver
    image: "crazymax/fail2ban:${FAIL2BAN_CONTAINER_VERSION}"
    network_mode: "host"
    restart: always
    volumes:
      - ./fail2ban/settings/filter.d:/data/filter.d:ro
      - ./fail2ban/settings/jail.d:/data/jail.d:ro
      - /var/log:/var/log:ro
      - fail2ban-data:/data

  hass:
    container_name: hass
    depends_on:
      - hass-db
      - openzwave
      - traefik
      - vernemq
    image: "homeassistant/home-assistant:${HOME_ASSISTANT_CORE_VERSION}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hass.middlewares=security"
      - "traefik.http.routers.hass.entrypoints=websecure"
      - "traefik.http.routers.hass.rule=Host(`${TRAEFIK_HOST_HASS}`)"
      - "traefik.http.routers.hass.tls=true"
      - "traefik.http.services.hass.loadbalancer.server.port=8123"
    network_mode: host
    restart: always
    volumes:
      - ./hass/settings/conf:/config/conf
      - ./hass/settings/configuration.yaml:/config/configuration.yaml
      - ./hass/settings/custom_components:/config/custom_components
      - ./hass/settings/scenes.yaml:/config/scenes.yaml
      - ./hass/settings/secrets.yaml:/config/secrets.yaml
      - ./hass/settings/ssh_keys:/config/ssh_keys
      - hass-config:/config

  hass-db:
    container_name: hass-db
    environment:
      POSTGRES_DB: "${HASS_DB_NAME}"
      POSTGRES_PASSWORD: "${HASS_DB_PASSWORD}"
      POSTGRES_USER: "${HASS_DB_USER}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${HASS_DB_USER}"]
      interval: 5s
      timeout: 10s
      retries: 3
    image: "postgres:${POSTGRES_VERSION}-alpine"
    ports:
      - "5432:5432/tcp"
    restart: always
    volumes:
      - hass-db-data:/var/lib/postgresql/data

  metrics2mqtt:
    build:
      context: metrics2mqtt/docker
      args:
        version: 0.1.18
    container_name: metrics2mqtt
    depends_on:
      - vernemq
    environment:
      COMMAND_OPTIONS_STRING: >
        --name=hub
        --interval=60
        --cpu=60
        --interval=10
        --vm
        --du="/"
        -vvvvv
      MQTT_BROKER: vernemq
      MQTT_PASSWORD: "${VERNEMQ_PASSWORD_METRICS2MQTT}"
      MQTT_USERNAME: metrics2mqtt
    restart: always
    volumes:
      - /proc:/proc

  openzwave:
    container_name: openzwave
    depends_on:
      - vernemq
    image: "openzwave/ozwdaemon:allinone-build-${OPENZWAVE_VERSION}"
    devices:
      - "/dev/zwave:/dev/zwave"
    environment:
      MQTT_PASSWORD: "${VERNEMQ_PASSWORD_OPEN_ZWAVE}"
      MQTT_SERVER: vernemq
      MQTT_USERNAME: open_zwave
      OZW_NETWORK_KEY: "${OPENZWAVE_NETWORK_KEY}"
      USB_PATH: /dev/zwave
    ports:
      - "5901:5901/tcp"
    restart: always
    security_opt:
      - seccomp:unconfined
    volumes:
      - openzwave-config:/opt/ozw/config

  portainer:
    container_name: portainer
    depends_on:
      - traefik
    image: "portainer/portainer-ce:${PORTAINER_VERSION}-alpine"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.middlewares=security"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.rule=Host(`${TRAEFIK_HOST_PORTAINER}`)"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-config:/data

  restic-backup:
    container_name: restic-backup
    environment:
      B2_ACCOUNT_ID: "${RESTIC_B2_ACCOUNT_ID}"
      B2_ACCOUNT_KEY: "${RESTIC_B2_ACCOUNT_KEY}"
      BACKUP_CRON: "15 * * * *"
      POST_COMMANDS_SUCCESS: "curl -s ${HEALTHCHECKS_BACKUP_URL}"
      RESTIC_BACKUP_ARGS: >-
        --exclude=".cache"
        --verbose
      RESTIC_BACKUP_SOURCES: /data
      RESTIC_FORGET_ARGS: >-
        --keep-last 10
        --keep-daily 7
        --keep-weekly 2
        --keep-monthly 1
      RESTIC_PASSWORD: "${RESTIC_PASSWORD}"
      RESTIC_REPOSITORY: "${RESTIC_REPOSITORY}"
      RUN_ON_STARTUP: "true"
      TZ: America/Denver
    image: mazzolino/restic:latest
    restart: always
    volumes:
      - /etc:/data/etc:ro
      - /home:/data/home:ro
      - /root:/data/root:ro
      - /usr/local:/data/usr/local:ro
      - /var/lib/docker/volumes:/data/var/lib/docker/volumes:ro

  restic-prune:
    container_name: restic-prune
    environment:
      B2_ACCOUNT_ID: "${RESTIC_B2_ACCOUNT_ID}"
      B2_ACCOUNT_KEY: "${RESTIC_B2_ACCOUNT_KEY}"
      PRUNE_CRON: "0 0 4 * * *"
      RESTIC_PASSWORD: "${RESTIC_PASSWORD}"
      RESTIC_REPOSITORY: "${RESTIC_REPOSITORY}"
      RUN_ON_STARTUP: "true"
      TZ: America/Denver
    image: mazzolino/restic:latest
    restart: always

  traefik:
    command:
      - "--accesslog.filepath=/var/log/access.log"
      - "--accesslog.filters.statusCodes=400-499"
      - "--api"
      - "--certificatesResolvers.linode.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
      - "--certificatesresolvers.linode.acme.dnschallenge.provider=linodev4"
      - "--certificatesresolvers.linode.acme.dnschallenge=true"
      - "--certificatesresolvers.linode.acme.email=${ACME_EMAIL_ADDRESS}"
      - "--certificatesresolvers.linode.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik/"
    container_name: traefik
    environment:
      LINODE_PROPAGATION_TIMEOUT: 900
      LINODE_TOKEN: "${TRAEFIK_LINODE_API_KEY}"
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    image: "traefik:${TRAEFIK_VERSION}"
    labels:
      # Middlewares:
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USERS}"
      - "traefik.http.middlewares.security.ratelimit.average=100"
      - "traefik.http.middlewares.security.ratelimit.burst=50"

      # Global Wildcard Certs:
      - "traefik.http.routers.wildcard-certs.tls.certresolver=linode"
      - "traefik.http.routers.wildcard-certs.tls.domains[0].main=${TRAEFIK_DOMAIN}"
      - "traefik.http.routers.wildcard-certs.tls.domains[0].sans=*.${TRAEFIK_DOMAIN}"

      # Dashboard:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.middlewares=auth,security"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_HOST_TRAEFIK}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=linode"
    ports:
      - "443:443/tcp"
    restart: always
    volumes:
      - ./traefik/settings:/etc/traefik:ro
      - /var/log/traefik:/var/log
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt-data:/letsencrypt

  vernemq:
    container_name: vernemq
    depends_on:
      - traefik
    environment:
      DOCKER_VERNEMQ_ACCEPT_EULA: "yes"
      DOCKER_VERNEMQ_USER_ECOWITT: "${VERNEMQ_PASSWORD_ECOWITT}"
      DOCKER_VERNEMQ_USER_HASS: "${VERNEMQ_PASSWORD_HASS}"
      DOCKER_VERNEMQ_USER_METRICS2MQTT: "${VERNEMQ_PASSWORD_METRICS2MQTT}"
      DOCKER_VERNEMQ_USER_MIFLORA-MQTT-DAEMON: >
        ${VERNEMQ_PASSWORD_MIFLORA_MQTT_DAEMON}
      DOCKER_VERNEMQ_USER_OCTOPRINT2MQTT: >
        ${VERNEMQ_PASSWORD_OCTOPRINT2MQTT}
      DOCKER_VERNEMQ_USER_OPEN_ZWAVE: "${VERNEMQ_PASSWORD_OPEN_ZWAVE}"
      DOCKER_VERNEMQ_USER_RTLAMR: "${VERNEMQ_PASSWORD_RTLAMR}"
      DOCKER_VERNEMQ_USER_SONOFF: "${VERNEMQ_PASSWORD_SONOFF}"
      DOCKER_VERNEMQ_USER_WYZE: "${VERNEMQ_PASSWORD_WYZE}"
      DOCKER_VERNEMQ_USER_ZIGBEE2MQTTASSISTANT: >
        ${VERNEMQ_PASSWORD_Z2M_ASSISTANT}
      DOCKER_VERNEMQ_PLUGINS.vmq_bridge: "on"
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.cafile: >
        /etc/ssl/certs/DST_Root_CA_X3.pem
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.insecure: "on"
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.max_outgoing_buffered_messages: 100
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.password: "${VERNEMQ_BRIDGE_PASSWORD}"
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.topic.1: "* in"
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.username: hub_mqtt
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0: "${VERNEMQ_BRIDGE_HOST}"
    healthcheck:
      test: ["CMD-SHELL", "vernemq ping | grep -q pong"]
      interval: 5s
      timeout: 10s
      retries: 3
    image: "vernemq/vernemq:${VERNEMQ_VERSION}-alpine"
    ports:
      - "1883:1883/tcp"
    restart: always
    user: root
    volumes:
      - /etc/ssl:/etc/ssl:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - vernemq-data:/vernemq/data

  zigbee2mqtt:
    container_name: zigbee2mqtt
    depends_on:
      - vernemq
    devices:
      - "/dev/zigbee:/dev/zigbee"
    environment:
      TZ: America/Denver
    image: "koenkk/zigbee2mqtt:${Z2M_VERSION}"
    restart: always
    volumes:
      - ./zigbee2mqtt/settings/configuration.yaml:/app/data/configuration.yaml
      - zigbee2mqtt-config:/app/data

  zigbee2mqttassistant:
    container_name: zigbee2mqttassistant
    depends_on:
      - traefik
      - vernemq
    environment:
      Z2MA_SETTINGS__MQTTSERVER: vernemq
      Z2MA_SETTINGS__MQTTUSERNAME: "${Z2M_ASSISTANT_MQTT_USERNAME}"
      Z2MA_SETTINGS__MQTTPASSWORD: "${Z2M_ASSISTANT_MQTT_PASSWORD}"
    image: "carldebilly/zigbee2mqttassistant:${Z2M_ASSISTANT_VERSION}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.z2m-assistant.headers.frameDeny=false"
      - "traefik.http.routers.z2m-assistant.middlewares=security"
      - "traefik.http.routers.z2m-assistant.entrypoints=websecure"
      - "traefik.http.routers.z2m-assistant.rule=Host(`${TRAEFIK_HOST_Z2M_ASSISTANT}`)"
      - "traefik.http.routers.z2m-assistant.tls=true"
      - "traefik.http.services.z2m-assistant.loadbalancer.server.port=80"
    restart: always

volumes:

  fail2ban-data:
  hass-config:
  hass-db-data:
  letsencrypt-data:
  openzwave-config:
  portainer-config:
  vernemq-data:
  zigbee2mqtt-config:
