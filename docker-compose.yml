---
version: "2"

services:

  almond:
    container_name: almond
    image: "stanfordoval/almond-server:v${ALMOND_SERVER_VERSION}-portable"
    network_mode: host
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - almond-config:/var/lib/almond-server

  appdaemon:
    container_name: appdaemon
    environment:
      EXTRA_CMD: -D INFO
    image: "acockburn/appdaemon:${APPDAEMON_VERSION}"
    ports:
      - "127.0.0.1:5051:5051"
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - appdaemon-config:/conf

  esphome-dashboard:
    container_name: esphome-dashboard
    image: "esphome/esphome:${ESPHOME_VERSION}"
    network_mode: host
    restart: always
    volumes:
      - ./esphome:/config
      - /etc/localtime:/etc/localtime:ro

  fail2ban:
    cap_add:
      - NET_ADMIN
      - NET_RAW
    container_name: fail2ban
    environment:
      TZ: America/Denver
      F2B_LOG_TARGET: /usr/local/fail2ban-log/fail2ban.log
      F2B_MAX_RETRY: 3
      F2B_IPTABLES_CHAIN: INPUT
    image: "crazymax/fail2ban:${FAIL2BAN_CONTAINER_VERSION}"
    network_mode: host
    restart: always
    volumes:
      - ./fail2ban/settings/jail.local:/etc/fail2ban/jail.local
      - /etc/localtime:/etc/localtime:ro
      - /var/log:/var/log:ro
      - fail2ban-config:/data
      - fail2ban-log:/usr/local/fail2ban-log

  fail2ban-mqtt-notifier:
    build: ./fail2ban-mqtt-notifier/docker
    command: /entry.sh
    container_name: fail2ban-mqtt-notifier
    image: bachya/fail2ban-mqtt-notifier:latest
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/log/nginx:/var/log/nginx:ro
      - fail2ban-log:/var/log/fail2ban:ro

  glances:
    container_name: glances
    environment:
      GLANCES_OPT: -w --enable-plugin smart
    image: vimagick/glances:latest
    network_mode: host
    pid: host
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - glances-config:/etc/glances:ro

  grafana:
    container_name: grafana
    depends_on:
      - influxdb
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USERNAME}"
      GF_SERVER_DOMAIN: "${GRAFANA_DOMAIN}"
    image: "grafana/grafana:${GRAFANA_VERSION}"
    ports:
      - "127.0.0.1:8878:3000/tcp"
    restart: unless-stopped
    user: "104"
    volumes:
      - grafana-config:/var/lib/grafana

  hass:
    container_name: hass
    depends_on:
      - glances
      - mysql-hass
      - influxdb
      - vernemq
    devices:
      - "/dev/zwave:/dev/zwave"
    image: "homeassistant/home-assistant:${HOME_ASSISTANT_CORE_VERSION}"
    network_mode: host
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - hass-config:/config

  influxdb:
    container_name: influxdb
    image: "influxdb:${INFLUXDB_VERSION}-alpine"
    environment:
      INFLUXDB_DB: "${INFLUXDB_DB}"
      INFLUXDB_USER: "${INFLUXDB_USER}"
      INFLUXDB_USER_PASSWORD: "${INFLUXDB_PASSWORD}"
    ports:
      - "8086:8086/tcp"
    restart: unless-stopped
    volumes:
      - influxdb-config:/var/lib/influxdb

  mysql-hass:
    container_name: mysql-hass
    environment:
      MYSQL_DATABASE: "${MYSQL_HASS_DATABASE}"
      MYSQL_PASSWORD: "${MYSQL_HASS_PASSWORD}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_HASS_ROOT_PASSWORD}"
      MYSQL_USER: "${MYSQL_HASS_USER}"
    image: bianjp/mariadb-alpine:latest
    ports:
      - "3306:3306/tcp"
    restart: always
    volumes:
      - mysql-hass-data:/var/lib/mysql

  nginx:
    cap_add:
      - NET_ADMIN
    container_name: nginx
    image: "50e49b6b-b382-4336-bf43-a74c32e762a0.bachyaproductions.com:18884\
            /bachya/nginx-geoip:${NGINX_VERSION}"
    network_mode: host
    restart: always
    volumes:
      - ./nginx/settings/conf.d:/etc/nginx/conf.d
      - ./nginx/settings/dhparams.pem:/etc/nginx/dhparams.pem
      - ./nginx/settings/geoip.rules:/etc/nginx/geoip.rules
      - ./nginx/settings/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/settings/proxy.conf:/etc/nginx/proxy.conf
      - ./nginx/settings/security.conf:/etc/nginx/security.conf
      - ./nginx/settings/ssl.conf:/etc/nginx/ssl.conf
      - ./nginx/settings/useragents.rules:/etc/nginx/useragents.rules
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/ssl:/etc/ssl:ro
      - /var/log/nginx:/var/log/nginx

  portainer:
    container_name: portainer
    image: "portainer/portainer:${PORTAINER_VERSION}"
    ports:
      - "127.0.0.1:9000:9000/tcp"
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-config:/data

  vernemq:
    container_name: vernemq
    environment:
      DOCKER_VERNEMQ_ACCEPT_EULA: "yes"
      DOCKER_VERNEMQ_USER_hass: "${VERNEMQ_PASSWORD_HASS}"
      DOCKER_VERNEMQ_USER_miflora-mqtt-daemon: >
        ${VERNEMQ_PASSWORD_MIFLORA_MQTT_DAEMON}
      DOCKER_VERNEMQ_USER_octoprint2mqtt: >
        ${VERNEMQ_PASSWORD_OCTOPRINT2MQTT}
      DOCKER_VERNEMQ_USER_rtlamr: "${VERNEMQ_PASSWORD_RTLAMR}"
      DOCKER_VERNEMQ_USER_sonoff: "${VERNEMQ_PASSWORD_SONOFF}"
      DOCKER_VERNEMQ_USER_wyze: "${VERNEMQ_PASSWORD_WYZE}"
      DOCKER_VERNEMQ_USER_zigbee2mqttassistant: >
        ${VERNEMQ_PASSWORD_Z2M_ASSISTANT}
      DOCKER_VERNEMQ_plugins.vmq_bridge: "on"
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.cafile: >
        /etc/ssl/certs/DST_Root_CA_X3.pem
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.insecure: "on"
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.max_outgoing_buffered_messages: 100
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.password: "${VERNEMQ_BRIDGE_PASSWORD}"
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.topic.1: "* in"
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.username: hub_mqtt
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0: "${VERNEMQ_BRIDGE_HOST}"
    image: "erlio/docker-vernemq:${VERNEMQ_VERSION}-alpine"
    ports:
      - "1883:1883/tcp"
      - "127.0.0.1:8888:8888/tcp"
    restart: always
    user: root
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/ssl:/etc/ssl:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - vernemq-data:/vernemq/data

  zigbee2mqtt:
    container_name: zigbee2mqtt
    depends_on:
      - vernemq
    devices:
      - "/dev/zigbee:/dev/zigbee"
    environment:
      TZ: America/Denver
    image: "koenkk/zigbee2mqtt:${Z2M_VERSION}"
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - zigbee2mqtt-config:/app/data

  zigbee2mqttassistant:
    container_name: zigbee2mqttassistant
    depends_on:
      - vernemq
    environment:
      Z2MA_SETTINGS__MQTTSERVER: vernemq
      Z2MA_SETTINGS__MQTTUSERNAME: "${Z2M_ASSISTANT_MQTT_USERNAME}"
      Z2MA_SETTINGS__MQTTPASSWORD: "${Z2M_ASSISTANT_MQTT_PASSWORD}"
    image: "carldebilly/zigbee2mqttassistant:${Z2M_ASSISTANT_VERSION}"
    ports:
      - "127.0.0.1:8880:80/tcp"
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - zigbee2mqtt-config:/app/data

volumes:

  almond-config:
  appdaemon-config:
  fail2ban-config:
  fail2ban-log:
  glances-config:
  grafana-config:
  hass-config:
  influxdb-config:
  mysql-hass-data:
  portainer-config:
  vernemq-data:
  zigbee2mqtt-config:
