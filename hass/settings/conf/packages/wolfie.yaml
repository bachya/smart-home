---
alert:
  wolfie_cycle_complete:
    name: 🤖 Wolfie has finished cleaning and can be emptied.
    title: Wolfie
    entity_id: input_select.wolfie_bin_status
    state: Full
    repeat:
      - 120
    notifiers:
      - everyone
    data:
      push:
        category: WOLFIE

  wolfie_stuck:
    name: "🤖 Wolfie is stuck on something and needs help."
    title: Wolfie
    entity_id: vacuum.rockrobo
    state: error
    repeat:
      - 10
    notifiers:
      - everyone

automation:
  - alias: "Alter Wolfie based on alarm status"
    id: "alter_wolfie_based_on_alarm_status"
    trigger:
      - platform: state
        entity_id: vacuum.rockrobo
        to: cleaning
      - platform: state
        entity_id: alarm_control_panel.123_main_street
        to: armed_away
      - platform: state
        entity_id: input_select.wolfie_bin_status
        to: Full
    action:
      choose:
        - conditions:
            - condition: state
              entity_id: alarm_control_panel.123_main_street
              state: armed_away
            - condition: state
              entity_id: vacuum.rockrobo
              state: cleaning
          sequence:
            - service: vacuum.pause
              data:
                entity_id: vacuum.rockrobo
            - service: alarm_control_panel.alarm_arm_home
              data:
                entity_id: alarm_control_panel.123_main_street
            - wait_template: >
                {{ is_state(
                  "alarm_control_panel.123_main_street", "armed_home"
                ) }}
              timeout: "00:01:00"
              continue_on_timeout: false
            - service: vacuum.start
              data:
                entity_id: vacuum.rockrobo
        - conditions:
            condition: not
            conditions:
              - condition: state
                entity_id: sensor.proximity_zone
                state: Home
              - condition: state
                entity_id: alarm_control_panel.8673_e_55th_avenue
                state: armed_away
          sequence:
            service: alarm_control_panel.alarm_arm_away
            data:
              entity_id: alarm_control_panel.8673_e_55th_avenue

  - alias: "Manage Wolfie's Bin"
    id: "manage_wolfies_bin"
    trigger:
      - platform: state
        entity_id: vacuum.rockrobo
      - platform: state
        entity_id: alarm_control_panel.8673_e_55th_avenue
    action:
      choose:
        # When Wolfie starts running, mark it (since the WiFi is flaky):
        - conditions:
            condition: state
            entity_id: vacuum.rockrobo
            state: cleaning
          sequence:
            service: input_boolean.turn_on
            data:
              entity_id: input_boolean.wolfie_running
        # When Wolfie returns to the dock, alter the bin appropriately:
        - conditions:
            - condition: state
              entity_id: vacuum.rockrobo
              state: docked
            - condition: state
              entity_id: input_boolean.wolfie_running
              state: "on"
          sequence:
            - service: input_select.select_option
              data:
                entity_id: input_select.wolfie_bin_status
                option: Full
            - service: input_boolean.turn_off
              data:
                entity_id: input_boolean.wolfie_running

  - alias: "Notify when time for Wolfie to run"
    id: "notify_when_time_for_wolfie_to_run"
    trigger:
      platform: state
      entity_id: calendar.wolfie_schedule
      to: "on"
    action:
      service: notify.everyone
      data:
        message: 🤖 It's time to run Wolfie!
        title: Vacuum Time

  - alias: "Notify when Wolfie needs a new consumable"
    id: "notify_when_wolfie_needs_a_new_consumable"
    trigger:
      - platform: numeric_state
        entity_id:
          - sensor.vacuum_filter_remaining
          - sensor.vacuum_main_brush_remaining
          - sensor.vacuum_sensor_dirtiness_remaining
          - sensor.vacuum_side_brush_remaining
        below: 5
    condition:
      # This automation can get very chatty, so we only allow a notification
      # once per day:
      condition: template
      value_template: >
        {{
          as_timestamp(
            state_attr(
              "automation.notify_when_wolfie_needs_a_new_consumable",
              "last_triggered"
            )
          ) | timestamp_custom('%-d')
          != as_timestamp(now()) | timestamp_custom('%-d')
        }}
    action:
      service: notify.mobile_app_aarons_iphone
      data:
        title: "🤖 Wolfie Consumable Update"
        message: >
          {% if trigger.entity_id == "sensor.vacuum_filter_remaining" %}
            {% set name = "a new filter" %}
          {% elif trigger.entity_id == "sensor.vacuum_main_brush_remaining" %}
            {% set name = "a new main brush" %}
          {%
            elif trigger.entity_id == "sensor.vacuum_sensor_dirtiness_remaining"
          %}
            {% set name = "to have his sensors cleaned" %}
          {% elif trigger.entity_id == "sensor.vacuum_side_brush_remaining" %}
            {% set name = "a new side brush" %}
          {% endif %}

          Wolfie needs {{ name }}!

input_boolean:
  wolfie_running:
    icon: mdi:robot-vacuum
    name: Wolfie Running

input_select:
  wolfie_bin_status:
    name: Bin Status
    options:
      - Empty
      - Full

script:
  empty_wolfie:
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.wolfie_bin_status
          option: Empty

sensor:
  - platform: template
    sensors:
      vacuum_filter_remaining:
        friendly_name: Filter
        entity_id: vacuum.rockrobo
        value_template: >
          {{ state_attr("vacuum.rockrobo", "filter") }}
        unit_of_measurement: hours
        icon_template: mdi:timer-sand

      vacuum_main_brush_remaining:
        friendly_name: Main Brush
        entity_id: vacuum.rockrobo
        value_template: >
          {{ state_attr("vacuum.rockrobo", "mainBrush") }}
        unit_of_measurement: hours
        icon_template: mdi:timer-sand

      vacuum_sensor_dirtiness_remaining:
        friendly_name: Sensor Dirtiness
        entity_id: vacuum.rockrobo
        value_template: >
          {{ state_attr("vacuum.rockrobo", "sensor") }}
        unit_of_measurement: hours
        icon_template: mdi:timer-sand

      vacuum_side_brush_remaining:
        friendly_name: Side Brush
        entity_id: vacuum.rockrobo
        value_template: >
          {{ state_attr("vacuum.rockrobo", "sideBrush") }}
        unit_of_measurement: hours
        icon_template: mdi:timer-sand

      vacuum_status:
        friendly_name: Status
        value_template: >
          {{ states("vacuum.rockrobo") | title }}
        icon_template: >
          {% if is_state("vacuum.rockrobo", "docked")  %}
            mdi:battery-charging
          {% elif is_state("vacuum.rockrobo", "cleaning")  %}
            mdi:move-resize
          {% elif is_state("vacuum.rockrobo", "returning")  %}
            mdi:keyboard-return
          {% elif is_state("vacuum.rockrobo", "idle")  %}
            mdi:dots-horizontal
          {% elif is_state("vacuum.rockrobo", "paused")  %}
            mdi:pause-circle
          {% else %}
            mdi:help-circle
          {% endif %}

      vacuum_fan_speed:
        friendly_name: Fan Speed
        entity_id: vacuum.rockrobo
        value_template: >
          {{ state_attr("vacuum.rockrobo", "fan_speed") | title }}
        icon_template: mdi:speedometer

      vacuum_battery:
        friendly_name: Vacuum Battery
        value_template: >
          {{ state_attr("vacuum.rockrobo", "battery_level") }}
        unit_of_measurement: "%"
        device_class: battery

      vacuum_cleaning_time:
        friendly_name: Time of Last Cycle
        entity_id: vacuum.rockrobo
        value_template: >
          {{ state_attr("vacuum.rockrobo", "currentCleanTime") }}
        icon_template: mdi:timer
        unit_of_measurement: minutes

      vacuum_cleaned_area:
        friendly_name: Area of Last Cycle
        entity_id: vacuum.rockrobo
        unit_of_measurement: m ²
        value_template: >
          {{ state_attr("vacuum.rockrobo", "currentCleanArea") }}
        icon_template: mdi:ruler

      vacuum_last_run:
        friendly_name: Last Run Date/Time
        value_template: >
          {{
            state_attr("vacuum.rockrobo", "last_run_stats")["endTime"]
            | multiply(0.001)
            | timestamp_custom("%m/%d, %I:%M %p")
          }}
        icon_template: mdi:calendar-check

      vacuum_next_run:
        friendly_name: Next Run Date/Time
        value_template: >
          {{ as_timestamp(state_attr("calendar.wolfie_schedule", "start_time"))
          | timestamp_custom("%m/%d, %I:%M %p", False) }}
        icon_template: mdi:calendar-check
