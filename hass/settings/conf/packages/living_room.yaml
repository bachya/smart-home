---
alert:
  fiddle_leaf_fig_moisture:
    name: "ðŸŒ´ Fred is low on moisture and needs a drink."
    title: Fred's Moisture
    entity_id: binary_sensor.should_notify_about_fred_dry
    state: "on"
    repeat:
      - 60
    skip_first: true
    notifiers:
      - phones

automation:
  - alias: "Turn living room lights on when we arrive"
    id: "turn_living_room_lights_on_when_we_arrive"
    trigger:
      platform: state
      entity_id: sensor.proximity_zone
      to: Home
    condition:
      condition: and
      conditions:
        - condition: sun
          after: sunset
          # This condition ensures that when  sensor.proximity_zone goes from
          # unavailable to Home (e.g., after a deployment), the lights don't
          # turn on:
        - condition: template
          value_template: >
            {{ trigger.from_state.state != "unavailable"}}
    action:
      service: switch.turn_on
      data:
        entity_id: group.living_room_lights

  - alias: "Turn certain living room lights on at sunset"
    id: "turn_certain_living_room_lights_on_at_sunset"
    trigger:
      platform: event
      event_type: LOCAL_SUNSET
    condition:
      # If we've already gone to bed, we will have turned on the "Good Night"
      # scene (which automatically activates blackout mode); in that case, we
      # prevent the light from turning on (otherwise it'll stay on all night
      # since there isn't a subsequent automation to turn it off):
      condition: state
      entity_id: input_boolean.blackout_mode
      state: "off"
    action:
      service: homeassistant.turn_on
      data:
        entity_id: group.sunset_living_room_lights

  - alias: "Turn powder room fan back on if someone turns it off"
    id: "turn_powder_room_fan_back_on_if_someone_turns_it_off"
    trigger:
      platform: state
      entity_id: switch.powder_room_fan
      to: "off"
      for:
        minutes: 1
    action:
      service: switch.turn_on
      data:
        entity_id: switch.powder_room_fan

binary_sensor:
  - platform: template
    sensors:
      should_notify_about_fred_dry:
        value_template: >-
          {{
            not is_state("sensor.fiddle_leaf_fig_moisture", "unknown") and
            states("sensor.fiddle_leaf_fig_moisture") | int < 15
          }}

group:
  living_room_lights:
    entities:
      - switch.bar_cart_leds
      - switch.christmas_tree
      - switch.reading_lamp
      - switch.sofa_lamp
    all: true

  sunset_living_room_lights:
    entities:
      - switch.bar_cart_leds
      - switch.christmas_tree
      - switch.reading_lamp
    all: true

sensor:
  - platform: filter
    name: "Filtered Fiddle Leaf Fig Brightness (%)"
    entity_id: sensor.fiddle_leaf_fig_brightness
    filters:
      - filter: range
        upper_bound: 100

  - platform: mqtt
    name: Fiddle Leaf Fig Moisture
    state_topic: "miflora/FiddleLeafFig"
    value_template: "{{ value_json.moisture }}"
    unit_of_measurement: "%"
    icon: "mdi:water-percent"
    force_update: true

  - platform: template
    sensors:
      fiddle_leaf_fig_brightness:
        friendly_name: "Living Room: Brightness (Perception)"
        value_template: >
          {{ (
            states("sensor.fiddle_leaf_fig_brightness") | int | log(10)/5
          ) | round(2) * 100 }}
        unit_of_measurement: "%"
        device_class: illuminance

  - platform: template
    sensors:
      roku_source:
        friendly_name: Roku Source
        entity_id: media_player.living_room_roku
        value_template: >
          {{ states.media_player.living_room_roku.attributes.app_name }}
        icon_template: >
          {% set state = state_attr(
            "media_player.living_room_roku", "app_name"
            ) %}
          {% if state == 'Netflix'%}
            mdi:netflix
          {% elif state == 'Hulu'%}
            mdi:hulu
          {% elif state == 'XFINITY Stream'%}
            mdi:television-classic
          {% elif state == 'YouTube'%}
            mdi:youtube-play
          {% elif state == 'Aquatic Life'%}
            mdi:fish
          {% elif state == 'Plex'%}
            mdi:plex
          {% else %}
            mdi:apps
          {% endif %}
