---
automation:
  - alias: "Climate Schedule"
    id: "climate_schedule"
    mode: queued
    trigger:
      - platform: homeassistant
        event: start
        # We explicitly watch for state changes where the state itself changes;
        # this prevents manually adjustments to the thermostat from triggerig
        # this automation:
      - platform: state
        entity_id: climate.thermostat
        from: heat_cool
      - platform: state
        entity_id: climate.thermostat
        from: cool
        to: heat
      - platform: state
        entity_id: climate.thermostat
        from: heat
        to: cool
      - platform: state
        entity_id: climate.thermostat
        from: "off"
        to: cool
      - platform: state
        entity_id: climate.thermostat
        from: "off"
        to: heat
      - platform: state
        entity_id: binary_sensor.in_bed
      - platform: state
        entity_id: input_boolean.away_mode
      - platform: state
        entity_id: input_number.daytime_dyson_fan_speed
      - platform: state
        entity_id: input_number.daytime_temperature_ac
      - platform: state
        entity_id: input_number.daytime_temperature_heat
      - platform: state
        entity_id: input_number.nighttime_dyson_fan_speed
      - platform: state
        entity_id: input_number.nighttime_temperature_ac
      - platform: state
        entity_id: input_number.nighttime_temperature_heat
      - platform: state
        entity_id: input_number.thermostat_eco_high_threshold
      - platform: state
        entity_id: input_number.thermostat_eco_low_threshold
    action:
      choose:
        # Away Mode On
        - conditions:
            condition: state
            entity_id: input_boolean.away_mode
            state: "on"
          sequence:
            - service: input_select.select_option
              data:
                entity_id: input_select.last_hvac_mode
                option: "{{ states('climate.thermostat') }}"
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.thermostat
                hvac_mode: heat_cool
            - wait_template: >
                {{
                  is_state("climate.thermostat", "heat_cool")
                }}
            - service: climate.set_temperature
              data:
                entity_id: climate.thermostat
                target_temp_high: >
                  {{
                    states("input_number.thermostat_eco_high_threshold") | float
                  }}
                target_temp_low: >
                  {{
                    states("input_number.thermostat_eco_low_threshold") | float
                  }}
            - service: fan.turn_off
              entity_id: fan.pure_humidify_cool
        # Away Mode Off
        - conditions:
            - condition: state
              entity_id: climate.thermostat
              state: heat_cool
            - condition: state
              entity_id: input_boolean.away_mode
              state: "off"
          sequence:
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.thermostat
                hvac_mode: "{{ states('input_select.last_hvac_mode') }}"
            - service: fan.turn_on
              entity_id: fan.pure_humidify_cool
        # Daytime
        - conditions:
            - condition: state
              entity_id: binary_sensor.in_bed
              state: "off"
            - condition: state
              entity_id: input_boolean.away_mode
              state: "off"
          sequence:
            - service: climate.set_temperature
              entity_id: climate.thermostat
              data:
                temperature: >
                  {%
                    if states("climate.thermostat") == "cool"
                  %}
                    {{ states("input_number.daytime_temperature_ac") | float }}
                  {% else %}
                    {{
                      states("input_number.daytime_temperature_heat") | float
                    }}
                  {% endif %}
            - service: switch.turn_off
              entity_id: switch.pure_humidify_cool_night_mode
            - service: humidifier.turn_off
              entity_id: humidifier.pure_humidify_cool
            - service: fan.set_percentage
              target:
                entity_id: fan.pure_humidify_cool
              data:
                percentage: >
                  states("input_number.daytime_dyson_fan_speed") | int
        # Nighttime
        - conditions:
            - condition: state
              entity_id: binary_sensor.in_bed
              state: "on"
            - condition: state
              entity_id: input_boolean.away_mode
              state: "off"
          sequence:
            - service: climate.set_temperature
              entity_id: climate.thermostat
              data:
                temperature: >
                  {%
                    if states("climate.thermostat") == "cool"
                  %}
                    {{
                      states("input_number.nighttime_temperature_ac") | float
                    }}
                  {% else %}
                    {{
                      states("input_number.nighttime_temperature_heat") | float
                    }}
                  {% endif %}
            - service: switch.turn_on
              entity_id: switch.pure_humidify_cool_night_mode
            - service: humidifier.turn_on
              entity_id: humidifier.pure_humidify_cool
            - service: fan.set_percentage
              target:
                entity_id: fan.pure_humidify_cool
              data:
                percentage: >
                  states("input_number.nighttime_dyson_fan_speed") | int

  - alias: "Proximity Climate Away Mode"
    id: "proximity_climate_away_mode"
    trigger:
      platform: state
      entity_id: sensor.proximity_zone
    action:
      choose:
        # Arriving (Normal Temperature)
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: sensor.proximity_zone
                  state: Nearby
                - condition: state
                  entity_id: sensor.proximity_zone
                  state: Home
            - condition: template
              value_template: >
                {{
                  states("input_number.outdoor_extreme_low_threshold") <=
                  states("sensor.side_yard_feels_like") <=
                  states("input_number.outdoor_extreme_high_threshold")
                }}
          sequence:
            service: input_boolean.turn_off
            data:
              entity_id: input_boolean.away_mode
        # Leaving (Normal Temperature)
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: sensor.proximity_zone
                  state: Home
            - condition: template
              value_template: >
                {{
                  states("input_number.outdoor_extreme_low_threshold") <=
                  states("sensor.side_yard_feels_like") <=
                  states("input_number.outdoor_extreme_high_threshold")
                }}
          sequence:
            service: input_boolean.turn_on
            data:
              entity_id: input_boolean.away_mode
        # Arriving (Extreme Temperature)
        - conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: sensor.proximity_zone
                  state: Away
            - condition: template
              value_template: >
                {{
                  states(
                    "sensor.side_yard_feels_like"
                  ) <= states(
                    "input_number.outdoor_extreme_low_threshold"
                  )
                  or states(
                    "sensor.side_yard_feels_like"
                  ) >= states(
                    "input_number.outdoor_extreme_high_threshold"
                  )
                }}
          sequence:
            service: input_boolean.turn_off
            data:
              entity_id: input_boolean.away_mode
        # Leaving (Extreme Temperature)
        - conditions:
            - condition: state
              entity_id: sensor.proximity_zone
              state: Away
            - condition: template
              value_template: >
                {{
                  states(
                    "sensor.side_yard_feels_like"
                  ) <= states(
                    "input_number.outdoor_extreme_low_threshold"
                  )
                  or states(
                    "sensor.side_yard_feels_like"
                  ) >= states(
                    "input_number.outdoor_extreme_high_threshold"
                  )
                }}
          sequence:
            service: input_boolean.turn_on
            data:
              entity_id: input_boolean.away_mode

  - alias: "Thermostat Sleep Timer"
    id: "thermostat_sleep_timer"
    use_blueprint:
      path: bachya/sleep-timer.yaml
      input:
        input_number: input_number.thermostat_sleep_timer
        timer: timer.thermostat_sleep_timer
        timer_cancel_action:
          - service: climate.set_hvac_mode
            data:
              entity_id: climate.thermostat
              hvac_mode: "{{ states('input_select.last_hvac_mode') }}"
        timer_expire_action:
          - service: climate.set_hvac_mode
            data:
              entity_id: climate.thermostat
              hvac_mode: "{{ states('input_select.last_hvac_mode') }}"
        timer_start_action:
          - service: input_select.select_option
            data:
              entity_id: input_select.last_hvac_mode
              option: "{{ states('climate.thermostat') }}"
          - service: climate.set_hvac_mode
            data:
              entity_id: climate.thermostat
              hvac_mode: "off"

input_number:
  daytime_dyson_fan_speed:
    name: "Daytime Dyson Fan Speed"
    min: 0
    max: 100
    step: 10
    unit_of_measurement: "%"
    icon: mdi:fan
  nighttime_dyson_fan_speed:
    name: "Nighttime Dyson Fan Speed"
    min: 0
    max: 100
    step: 10
    unit_of_measurement: "%"
    icon: mdi:fan
  daytime_temperature_ac:
    name: "Daytime Temperature (A/C)"
    min: 65
    max: 75
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat
  nighttime_temperature_ac:
    name: "Nighttime Temperature (A/C)"
    min: 65
    max: 75
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat
  daytime_temperature_heat:
    name: "Daytime Temperature (Heat)"
    min: 65
    max: 75
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat
  nighttime_temperature_heat:
    name: "Nighttime Temperature (Heat)"
    min: 65
    max: 75
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat
  outdoor_extreme_high_threshold:
    name: "Outdoor: Extreme High"
    min: 20
    max: 100
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermometer-chevron-up
  outdoor_extreme_low_threshold:
    name: "Outdoor: Extreme Low"
    min: 20
    max: 100
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermometer-chevron-down
  thermostat_eco_high_threshold:
    name: "Eco: High"
    min: 50
    max: 80
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat
  thermostat_eco_low_threshold:
    name: "Eco: Low"
    min: 50
    max: 80
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat
  thermostat_sleep_timer:
    name: Sleep Timer
    initial: 0
    min: 0
    max: 90
    step: 1
    unit_of_measurement: minutes
    icon: mdi:timer

input_select:
  last_hvac_mode:
    options:
      - "off"
      - cool
      - heat

sensor:
  - platform: filter
    name: Filtered Average Indoor Humidity
    entity_id: sensor.average_indoor_humidity
    filters:
      - filter: lowpass
        time_constant: 10
        precision: 1

  - platform: filter
    name: Filtered Average Indoor Temperature
    entity_id: sensor.average_indoor_temperature
    filters:
      - filter: lowpass
        time_constant: 10
        precision: 1

  - platform: filter
    name: Filtered Wind Speed
    entity_id: sensor.side_yard_wind_speed
    filters:
      - filter: lowpass
        time_constant: 10
        precision: 1

  - platform: filter
    name: "Filtered Outdoor Brightness (%)"
    entity_id: sensor.side_yard_solar_rad_log
    filters:
      - filter: range
        upper_bound: 100

  - platform: min_max
    name: Average Indoor Humidity
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.bedroom_humidity
      - sensor.master_bathroom_humidity
      - sensor.office_node_pro_humidity
      - sensor.pure_humidify_cool_humidity
      - sensor.side_yard_humidity_in
      - sensor.thermostat_humidity

  - platform: moon

  - platform: season

  - platform: template
    sensors:
      climate_schedy_target_temperature:
        value_template: >
          {{ states("schedy_room.thermostat_schedule_whole_house") }}
        device_class: temperature
        unit_of_measurement: °F
      friendly_season:
        friendly_name: Season
        value_template: "{{ states('sensor.season') | title }}"
        icon_template: >
          {% if is_state("sensor.season", "spring") %}
            mdi:flower
          {% elif is_state("sensor.season", "summer") %}
            mdi:sunglasses
          {% elif is_state("sensor.season", "autumn") %}
            mdi:leaf
          {% else %}
            mdi:snowflake
          {% endif %}
      moon_phase:
        friendly_name: Moon Phase
        value_template: >
          {{ states("sensor.moon") | replace('_', ' ') | title }}
        icon_template: mdi:weather-night
      side_yard_solar_rad_log:
        friendly_name: "Side Yard: Brightness (Perception)"
        entity_id: sensor.side_yard_solar_rad
        value_template: >
          {{ (
            states("sensor.side_yard_solar_rad_lx") | int | log(10)/5
          )| round(2) * 100 }}
        unit_of_measurement: "%"
        device_class: illuminance
      sunrise:
        friendly_name: Next Sunrise
        value_template: >
          {{ as_timestamp(
            state_attr("sun.sun", "next_rising")
          ) | timestamp_custom(' %I:%M %p') | replace(' 0', '') }}
        icon_template: mdi:weather-sunset-up
      sunset:
        friendly_name: Next Sunset
        value_template: >
          {{ as_timestamp(
            state_attr("sun.sun", "next_setting")
          ) | timestamp_custom(' %I:%M %p') | replace(' 0', '') }}
        icon_template: mdi:weather-sunset-down

  - platform: min_max
    name: Average Indoor Temperature
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.bedroom_temperature
      - sensor.basement_fire_fighter_air_temperature
      - sensor.fiddle_leaf_fig_temperature
      - sensor.guest_bedroom_sensor_temperature
      - sensor.kitchen_sensor_temperature
      - sensor.kitchen_sink_sensor_temperature
      - sensor.master_bathroom_temperature
      - sensor.office_node_pro_temperature
      - sensor.pure_humidify_cool_temperature
      - sensor.side_yard_inside_temp
      - sensor.thermostat_air_temperature
      - sensor.upstairs_hallway_sensor_temperature

  - platform: min_max
    name: Basement Temperature
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.basement_sensor_temperature
      - sensor.basement_fire_fighter_air_temperature
      - sensor.guardian_b4e62d98118d_temperature

  - platform: min_max
    name: Kitchen Temperature
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.kitchen_sensor_temperature
      - sensor.kitchen_sink_sensor_temperature
      - sensor.thermostat_air_temperature

  - platform: min_max
    name: Office Temperature
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.office_node_pro_temperature
      - sensor.side_yard_inside_temp

sun:

timer:
  thermostat_sleep_timer:
    name: Sleep Timer Remaining
