---
automation:
  - alias: "Climate Schedule"
    id: "climate_schedule"
    mode: queued

    trigger:
      - platform: state
        entity_id: climate.thermostat

      - platform: state
        id: away_mode_off
        entity_id: input_boolean.climate_away_mode
        to: "off"

      - platform: state
        id: away_mode_on
        entity_id: input_boolean.climate_away_mode
        to: "on"

      - platform: state
        entity_id:
          - binary_sensor.in_bed
          - input_number.daytime_dyson_fan_speed
          - input_number.daytime_temperature_ac
          - input_number.daytime_temperature_heat
          - input_number.nighttime_dyson_fan_speed
          - input_number.nighttime_temperature_ac
          - input_number.nighttime_temperature_heat
          - input_number.thermostat_eco_high_threshold
          - input_number.thermostat_eco_low_threshold

    condition:
      # In the case of the thermostat, we want to make sure that we only trigger
      # this automation when the actual state changes (so that actions like
      # bumping the heat a few degrees higher doesn't trigger it):
      - condition: template
        value_template: >-
          {{
            trigger.from_state
            and trigger.to_state.state != trigger.from_state.state
          }}

    action:
      choose:
        - alias: "Handle turning Climate Away Mode on"
          conditions:
            - condition: trigger
              id: away_mode_on

          sequence:
            - alias: "Save the current thermostat mode so we can use it alter"
              service: input_select.select_option
              target:
                entity_id: input_select.last_hvac_mode
              data:
                option: "{{ states('climate.thermostat') }}"

            - alias: "Set the thermostat mode to auto"
              service: climate.set_hvac_mode
              target:
                entity_id: climate.thermostat
              data:
                hvac_mode: heat_cool

            - alias: "Wait until the thermostat is set to auto mode"
              wait_template: >
                {{
                  is_state("climate.thermostat", "heat_cool")
                }}

            - alias: "Set the high and low temperatures for auto mode"
              service: climate.set_temperature
              target:
                entity_id: climate.thermostat
              data:
                target_temp_high: >
                  {{
                    states("input_number.thermostat_eco_high_threshold") | float
                  }}
                target_temp_low: >
                  {{
                    states("input_number.thermostat_eco_low_threshold") | float
                  }}

            - alias: "Turn off our bedroom fan"
              service: fan.turn_off
              target:
                entity_id: fan.pure_humidify_cool

        - alias: "Handle turning Climate Away Mode off"
          conditions:
            - condition: trigger
              id: away_mode_off

          sequence:
            - alias: "Set the thermostat mode to what we saved before"
              service: climate.set_hvac_mode
              target:
                entity_id: climate.thermostat
              data:
                hvac_mode: "{{ states('input_select.last_hvac_mode') }}"

            - alias: "Turn on our bedroom fan"
              service: fan.turn_on
              target:
                entity_id: fan.pure_humidify_cool

        - alias: "Handle our daytime-and-at-home climate schedule"
          conditions:
            - condition: state
              entity_id: binary_sensor.in_bed
              state: "off"

            - condition: state
              entity_id: input_boolean.climate_away_mode
              state: "off"

          sequence:
            - alias: "Set the target thermostat temperature"
              service: climate.set_temperature
              target:
                entity_id: climate.thermostat
              data:
                temperature: >
                  {%
                    if states("climate.thermostat") == "cool"
                  %}
                    {{ states("input_number.daytime_temperature_ac") | float }}
                  {% else %}
                    {{
                      states("input_number.daytime_temperature_heat") | float
                    }}
                  {% endif %}

            - alias: "Turn off our bedroom fan's night mode"
              service: switch.turn_off
              target:
                entity_id: switch.pure_humidify_cool_night_mode

            - alias: "Turn off our bedroom fan's humidifier"
              service: humidifier.turn_off
              target:
                entity_id: humidifier.pure_humidify_cool

            - alias: "Set the bedroom fan's speed"
              service: fan.set_percentage
              target:
                entity_id: fan.pure_humidify_cool
              data:
                percentage: >
                  {{ states("input_number.daytime_dyson_fan_speed") | int }}

        - alias: "Handle our nighttime-and-at-home climate schedule"
          conditions:
            - condition: state
              entity_id: binary_sensor.in_bed
              state: "on"

            - condition: state
              entity_id: input_boolean.climate_away_mode
              state: "off"

          sequence:
            - alias: "Set the target thermostat temperature"
              service: climate.set_temperature
              target:
                entity_id: climate.thermostat
              data:
                temperature: >
                  {%
                    if states("climate.thermostat") == "cool"
                  %}
                    {{
                      states("input_number.nighttime_temperature_ac") | float
                    }}
                  {% else %}
                    {{
                      states("input_number.nighttime_temperature_heat") | float
                    }}
                  {% endif %}

            - alias: "Turn on our bedroom fan's night mode"
              service: switch.turn_on
              target:
                entity_id: switch.pure_humidify_cool_night_mode

            - alias: "Turn on our bedroom fan's humidifier"
              service: humidifier.turn_on
              target:
                entity_id: humidifier.pure_humidify_cool

            - alias: "Set the bedroom fan's speed"
              service: fan.set_percentage
              target:
                entity_id: fan.pure_humidify_cool
              data:
                percentage: >
                  {{ states("input_number.nighttime_dyson_fan_speed") | int }}

  - alias: "Proximity Climate Away Mode"
    id: "proximity_climate_away_mode"

    trigger:
      - platform: state
        entity_id: sensor.proximity_zone

    action:
      choose:
        - alias: "Handle our arrival with 'normal' outdoor temperatures"
          conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: sensor.proximity_zone
                  state: Nearby

                - condition: state
                  entity_id: sensor.proximity_zone
                  state: Home

            - condition: template
              value_template: >
                {{
                  states("input_number.outdoor_extreme_low_threshold") <=
                  states("sensor.feelslike") <=
                  states("input_number.outdoor_extreme_high_threshold")
                }}

          sequence:
            - alias: "Turn off Climate Away Mode"
              service: input_boolean.turn_off
              target:
                entity_id: input_boolean.climate_away_mode

        - alias: "Handle our departure with 'normal' outdoor temperatures"
          conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: sensor.proximity_zone
                  state: Home
            - condition: template
              value_template: >
                {{
                  states("input_number.outdoor_extreme_low_threshold") <=
                  states("sensor.feelslike") <=
                  states("input_number.outdoor_extreme_high_threshold")
                }}

          sequence:
            - alias: "Turn on Climate Away Mode"
              service: input_boolean.turn_on
              target:
                entity_id: input_boolean.climate_away_mode

        - alias: "Handle our arrival with 'extreme' outdoor temperatures"
          conditions:
            - condition: not
              conditions:
                - condition: state
                  entity_id: sensor.proximity_zone
                  state: Away

            - condition: template
              value_template: >
                {{
                  states(
                    "sensor.feelslike"
                  ) <= states(
                    "input_number.outdoor_extreme_low_threshold"
                  )
                  or states(
                    "sensor.feelslike"
                  ) >= states(
                    "input_number.outdoor_extreme_high_threshold"
                  )
                }}

          sequence:
            - alias: "Turn off Climate Away Mode"
              service: input_boolean.turn_off
              target:
                entity_id: input_boolean.climate_away_mode

        - alias: "Handle our departure with 'extreme' outdoor temperatures"
          conditions:
            - condition: state
              entity_id: sensor.proximity_zone
              state: Away

            - condition: template
              value_template: >
                {{
                  states(
                    "sensor.feelslike"
                  ) <= states(
                    "input_number.outdoor_extreme_low_threshold"
                  )
                  or states(
                    "sensor.feelslike"
                  ) >= states(
                    "input_number.outdoor_extreme_high_threshold"
                  )
                }}

          sequence:
            - alias: "Turn on Climate Away Mode"
              service: input_boolean.turn_on
              target:
                entity_id: input_boolean.climate_away_mode

  - alias: "Thermostat Sleep Timer"
    id: "thermostat_sleep_timer"

    use_blueprint:
      path: bachya/sleep-timer.yaml

      input:
        input_number: input_number.thermostat_sleep_timer
        timer: timer.thermostat_sleep_timer
        timer_cancel_action:
          - alias: "Set the thermostat mode to what we saved before"
            service: climate.set_hvac_mode
            target:
              entity_id: climate.thermostat
            data:
              hvac_mode: "{{ states('input_select.last_hvac_mode') }}"

        timer_expire_action:
          - alias: "Set the thermostat mode to what we saved before"
            service: climate.set_hvac_mode
            target:
              entity_id: climate.thermostat
            data:
              hvac_mode: "{{ states('input_select.last_hvac_mode') }}"

        timer_start_action:
          - alias: "Save the current thermostat mode so we can use it alter"
            service: input_select.select_option
            target:
              entity_id: input_select.last_hvac_mode
            data:
              option: "{{ states('climate.thermostat') }}"

          - alias: "Set the thermostat mode to off"
            service: climate.set_hvac_mode
            target:
              entity_id: climate.thermostat
            data:
              hvac_mode: "off"

input_boolean:
  climate_away_mode:
    name: "Climate Away Mode"
    icon: mdi:home-search

input_number:
  daytime_dyson_fan_speed:
    name: "Daytime Dyson Fan Speed"
    min: 0
    max: 100
    step: 10
    unit_of_measurement: "%"
    icon: mdi:fan

  nighttime_dyson_fan_speed:
    name: "Nighttime Dyson Fan Speed"
    min: 0
    max: 100
    step: 10
    unit_of_measurement: "%"
    icon: mdi:fan

  daytime_temperature_ac:
    name: "Daytime Temperature (A/C)"
    min: 65
    max: 75
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat

  nighttime_temperature_ac:
    name: "Nighttime Temperature (A/C)"
    min: 65
    max: 75
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat

  daytime_temperature_heat:
    name: "Daytime Temperature (Heat)"
    min: 65
    max: 75
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat

  nighttime_temperature_heat:
    name: "Nighttime Temperature (Heat)"
    min: 65
    max: 75
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat

  outdoor_extreme_high_threshold:
    name: "Outdoor: Extreme High"
    min: 20
    max: 100
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermometer-chevron-up

  outdoor_extreme_low_threshold:
    name: "Outdoor: Extreme Low"
    min: 20
    max: 100
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermometer-chevron-down

  thermostat_eco_high_threshold:
    name: "Eco: High"
    min: 50
    max: 80
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat

  thermostat_eco_low_threshold:
    name: "Eco: Low"
    min: 50
    max: 80
    step: 1
    unit_of_measurement: °F
    icon: mdi:thermostat

  thermostat_sleep_timer:
    name: Sleep Timer
    initial: 0
    min: 0
    max: 90
    step: 1
    unit_of_measurement: minutes
    icon: mdi:timer

input_select:
  last_hvac_mode:
    options:
      - "off"
      - cool
      - heat

sensor:
  - platform: filter
    name: Filtered Average Indoor Humidity
    entity_id: sensor.average_indoor_humidity
    filters:
      - filter: lowpass
        time_constant: 10
        precision: 1

  - platform: filter
    name: Filtered Average Indoor Temperature
    entity_id: sensor.average_indoor_temperature
    filters:
      - filter: lowpass
        time_constant: 10
        precision: 1

  - platform: filter
    name: Filtered Wind Speed
    entity_id: sensor.windspeed
    filters:
      - filter: lowpass
        time_constant: 10
        precision: 1

  - platform: min_max
    name: Average Indoor Humidity
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.bedroom_humidity
      - sensor.humidityin
      - sensor.master_bathroom_humidity
      - sensor.office_node_pro_humidity
      - sensor.pure_humidify_cool_humidity
      - sensor.thermostat_humidity

  - platform: moon

  - platform: season

  - platform: template
    sensors:
      climate_schedy_target_temperature:
        value_template: >
          {{ states("schedy_room.thermostat_schedule_whole_house") }}
        device_class: temperature
        unit_of_measurement: °F
      friendly_season:
        friendly_name: Season
        value_template: "{{ states('sensor.season') | title }}"
        icon_template: >
          {% if is_state("sensor.season", "spring") %}
            mdi:flower
          {% elif is_state("sensor.season", "summer") %}
            mdi:sunglasses
          {% elif is_state("sensor.season", "autumn") %}
            mdi:leaf
          {% else %}
            mdi:snowflake
          {% endif %}
      moon_phase:
        friendly_name: Moon Phase
        value_template: >
          {{ states("sensor.moon") | replace('_', ' ') | title }}
        icon_template: mdi:weather-night
      sunrise:
        friendly_name: Next Sunrise
        value_template: >
          {{ as_timestamp(
            state_attr("sun.sun", "next_rising")
          ) | timestamp_custom(' %I:%M %p') | replace(' 0', '') }}
        icon_template: mdi:weather-sunset-up
      sunset:
        friendly_name: Next Sunset
        value_template: >
          {{ as_timestamp(
            state_attr("sun.sun", "next_setting")
          ) | timestamp_custom(' %I:%M %p') | replace(' 0', '') }}
        icon_template: mdi:weather-sunset-down

  - platform: min_max
    name: Average Indoor Temperature
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.bedroom_temperature
      - sensor.basement_firefighter_air_temperature
      - sensor.fiddle_leaf_fig_temperature
      - sensor.guest_bedroom_sensor_temperature
      - sensor.kitchen_sensor_temperature
      - sensor.kitchen_sink_sensor_temperature
      - sensor.master_bathroom_temperature
      - sensor.office_node_pro_temperature
      - sensor.pure_humidify_cool_temperature
      - sensor.tempin
      - sensor.thermostat_air_temperature
      - sensor.upstairs_hallway_sensor_temperature

  - platform: min_max
    name: Basement Temperature
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.basement_sensor_temperature
      - sensor.basement_firefighter_air_temperature
      - sensor.guardian_b4e62d98118d_temperature

  - platform: min_max
    name: Kitchen Temperature
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.kitchen_sensor_temperature
      - sensor.kitchen_sink_sensor_temperature
      - sensor.thermostat_air_temperature

  - platform: min_max
    name: Office Temperature
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.office_node_pro_temperature
      - sensor.tempin

sun:

timer:
  thermostat_sleep_timer:
    name: Sleep Timer Remaining
