---
api:
  encryption:
    key: !secret api_encryption_key
  password: !secret api_password

binary_sensor:
  - name: Air Quality Monitor 1 Status
    platform: status

display:
  - address: 39
    dimensions: 16x2
    id: lcd
    lambda: |-
      it.printf(0, 0, "%.1f%cF", id(temperature).state, 223);
      it.printf(8, 0, "AQI: %.0f", id(aqi).state);
      it.printf(0, 1, "%.1f%c", id(humidity).state, 37);
    platform: lcd_pcf8574

esphome:
  board: nodemcuv2
  name: air-quality-monitor1
  platform: ESP8266

i2c:
  scl: D1
  sda: D2

interval:
  - interval: 120s
    then:
      - switch.turn_on: pms_set
      - delay: 20s
      - switch.turn_off: pms_set

logger:

ota:

sensor:
  - humidity:
      id: humidity
      name: Air Quality Monitor 1 Humidity
    model: AM2302
    pin: D4
    platform: dht
    temperature:
      filters:
        - lambda: return x * (9.0/5.0) + 32.0;
      id: temperature
      name: Air Quality Monitor 1 Temperature
      unit_of_measurement: Â°F
    update_interval: 60s

  - platform: pmsx003
    pm_10_0:
      filters:
        - sliding_window_moving_average:
            send_every: 15
            window_size: 15
      id: pm_10_0
      name: Air Quality Monitor 1 PM 10.0

    pm_1_0:
      filters:
        - sliding_window_moving_average:
            send_every: 15
            window_size: 15
      id: pm_1_0
      name: Air Quality Monitor 1 PM 1.0

    pm_2_5:
      filters:
        - sliding_window_moving_average:
            send_every: 15
            window_size: 15
      id: pm_2_5
      name: Air Quality Monitor 1 PM 2.5
    type: PMSX003

  - id: aqi
    device_class: aqi
    lambda: >-
      float aqi = 0.0;
      float bp_high = 0.0;
      float bp_low = 0.0;
      float index_high = 0.0;
      float index_low = 0.0;
      float level = float(id(pm_2_5).state);

      if (level >= 0.0 && level <= 12.0) {
        bp_high = 12.0;
        index_high = 50.0;
      } else if (level >= 12.1 && level <= 35.4) {
        bp_high = 35.4;
        bp_low = 12.1;
        index_high = 100.0;
        index_low = 51.0;
      } else if (level >= 35.5 && level <= 55.4) {
        bp_high = 55.4;
        bp_low = 35.5;
        index_high = 150.0;
        index_low = 101.0;
      } else if (level >= 55.5 && level <= 150.4) {
        bp_high = 150.4;
        bp_low = 55.5;
        index_high = 200.0;
        index_low = 151.0;
      } else if (level >= 150.5 && level <= 250.4) {
        bp_high = 250.4;
        bp_low = 150.5;
        index_high = 300.0;
        index_low = 201.0;
      } else if (level >= 250.5 && level <= 350.4) {
        bp_high = 350.4;
        bp_low = 250.5;
        index_high = 400.0;
        index_low = 301.0;
      } else if (level >= 350.5 && level <= 550.4) {
        bp_high = 550.4;
        bp_low = 350.5;
        index_high = 500.0;
        index_low = 401.0;
      }

      aqi = (index_high - index_low) / (bp_high - bp_low) * (level - bp_low) +
      index_low;
      return aqi;
    name: AQI
    platform: template
    state_class: measurement

switch:
  - id: pms_set
    pin:
      number: D6
    platform: gpio

text_sensor:
  - lambda: |-
      auto state = id(esphome_version).state;
      return state.substr(0, state.find(' '));
    name: "Air Quality Monitor 1: ESPHome Version (Short)"
    platform: template

  - id: esphome_version
    name: "Air Quality Monitor 1: ESPHome Version"
    platform: version

uart:
  baud_rate: 9600
  rx_pin: D5

wifi:
  manual_ip:
    gateway: 172.16.20.1
    static_ip: 172.16.20.199
    subnet: 255.255.255.0
  ssid: !secret wifi_ssid
  password: !secret wifi_password
