---
substitutions:
  device_friendly_name: Wemos D1 Mini Garage Controller

api:
  password: !secret api_password

binary_sensor:
  - platform: gpio
    id: garage_door_open
    name: "${device_friendly_name} Open"
    on_state:
      then:
        - lambda: |-
            if (id(garage_door_open).state) {
              id(garage_door_cover).current_operation = COVER_OPERATION_IDLE;
              id(garage_door_cover).position = 1;
            } else {
              id(garage_door_cover).current_operation = COVER_OPERATION_CLOSING;
            }

            id(garage_door_cover).publish_state();
    pin:
      number: GPIO15
      inverted: true
      mode: INPUT_PULLUP

  - platform: gpio
    id: garage_door_closed
    name: "${device_friendly_name} Closed"
    on_state:
      then:
        - lambda: |-
            if (id(garage_door_closed).state) {
              id(garage_door_cover).current_operation = COVER_OPERATION_IDLE;
              id(garage_door_cover).position = 0;
            } else {
              id(garage_door_cover).current_operation = COVER_OPERATION_OPENING;
            }

            id(garage_door_cover).publish_state();
    pin:
      number: GPIO13
      inverted: true
      mode: INPUT_PULLUP

  - platform: status
    name: "${device_friendly_name} Status"

cover:
  - platform: template
    close_action:
      - switch.turn_on: relay
      - delay: 200ms
      - switch.turn_off: relay
    device_class: garage
    id: garage_door_cover
    name: "${device_friendly_name}"
    open_action:
      - switch.turn_on: relay
      - delay: 200ms
      - switch.turn_off: relay

esphome:
  name: wemos_d1_mini_garage_controller
  platform: ESP8266
  board: d1_mini

logger:

ota:

sensor:
  - platform: ultrasonic
    echo_pin: GPIO14
    name: Aaron's Parking Spot Distance
    trigger_pin: GPIO16
    update_interval: 3s

  - platform: ultrasonic
    echo_pin: GPIO1
    name: Britt's Parking Spot Distance
    trigger_pin: GPIO3
    update_interval: 3s

switch:
  - platform: gpio
    name: "${device_friendly_name} Relay"
    pin: GPIO12
    id: relay

  - platform: restart
    name: "${device_friendly_name} Restart"

text_sensor:
  - platform: version
    name: "${device_friendly_name}: ESPHome Version"
    id: esphome_version

  - platform: template
    name: "${device_friendly_name}: ESPHome Version (Short)"
    lambda: |-
      auto state = id(esphome_version).state;
      return state.substr(0, state.find(' '));

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
