#!/bin/bash
set -euxo pipefail

# Variables to edit when copying this deployment script to other repos:
BRANCH="master"
REPO_NAME="hub"

# Variables that shouldn't need editing:
API_BASE="https://bf5959ab-1a7e-47b7-9528-19651d1b8018.bachyaproductions.com:18884"
API_LAST_BUILD="api/repos/bachya/$REPO_NAME/builds"
API_TOKEN="mKAk7aBngFlvcpWe8ir4FGcSrJ6lgzyd"
API_USER_AGENT="User-Agent: Paw/3.1.8 (Macintosh; OS X/10.14.6) GCDHTTPRequest"

SLACK_HOOK_URL="https://hooks.slack.com/services/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"
COLOR_BLUE="#1539e0"
COLOR_GREEN="good"
COLOR_YELLOW="warning"

LAST_BUILD_FILEPATH="/tmp/${REPO_NAME}_last_drone_build"
BIN_PATH="$( dirname "$( cd "$(dirname "$0")" ; pwd -P )" )"


function fetch_latest_build_number() {
    curl \
        -s "$API_BASE/$API_LAST_BUILD" \
        -H "$API_USER_AGENT" \
        -H "Authorization: Bearer $API_TOKEN" \
        | jq 'map(select(.status == "success" and .target == "'$BRANCH'"))[0].number'
}

function remote_git() {
    git --git-dir "$BIN_PATH"/.git --work-tree="$BIN_PATH" "$@"
}

function send_slack_message() {
   local color="$2"
   local text="$1"
   local message
   message="\`$REPO_NAME/$BRANCH\`: $text"

   curl \
       -X "POST" \
     -H 'Content-Type: application/json' \
     -d $'{ "attachments": [ { "color": "'"$color"'", "text": "'"$message"'" } ] }' \
    "$SLACK_HOOK_URL"
}

function should_update() {
    local latest_build_number
    local local_branch
    local saved_build_number

    # If the repo has a branch other than the target one checked out, don't trigger
    # a build:
    local_branch="$(remote_git rev-parse --abbrev-ref HEAD)"
    if [ "$local_branch" != "$BRANCH" ]; then
        send_slack_message \
            "Refusing to deploy to local branch: $local_branch" \
            "$COLOR_YELLOW"
        echo "false"
        return
    fi

    # If the last build file doesn't exist, create it:
    [ ! -f "$LAST_BUILD_FILEPATH" ] && touch "$LAST_BUILD_FILEPATH"

    latest_build_number=$(fetch_latest_build_number)
    saved_build_number=$(cat "$LAST_BUILD_FILEPATH")

    # If the build number is the same as the last one retrieved, don't trigger
    # a build:
    if [ "$latest_build_number" == "$saved_build_number" ]; then
        echo "false"
        return
    fi

    echo "$latest_build_number" > "$LAST_BUILD_FILEPATH"

    echo "true"
}

function update() {
    local saved_build_number
    saved_build_number=$(cat "$LAST_BUILD_FILEPATH")

    send_slack_message \
        "Deployment for build #$saved_build_number starting..." \
        "$COLOR_BLUE"
    remote_git pull origin master
    "$BIN_PATH"/bin/build
    send_slack_message \
        "Deployment for build #$saved_build_number completed" \
        "$COLOR_GREEN"
}


dirty=$(should_update)
if [ "$dirty" == "true" ]; then
    update > /dev/null 2>&1
    echo -n "Deployment complete"
else
    echo -n "No deployment required"
fi
