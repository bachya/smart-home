#!/bin/bash
set -euo pipefail

REPO_PATH="$( dirname "$( cd "$(dirname "$0")" ; pwd -P )" )"

DRONE_BRANCH="master"
DRONE_BUILDS_API_ENDPOINT="api/repos/bachya/hub/builds"
DRONE_HOST="drone.myserver.com"
DRONE_TOKEN="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
DRONE_REPO_NAME="hub"

SLACK_COLOR_BLUE="#1539e0"
SLACK_COLOR_GREEN="good"
SLACK_COLOR_RED="danger"
SLACK_COLOR_YELLOW="warning"
SLACK_HOOK_URL="https://hooks.slack.com/services/ID/ID2/ID3"


function get_container_id() {
    local name="$1"
    docker ps -q -f name="^$name$"
}

function get_last_started_at() {
    local container_id="$1"
    docker inspect --format="{{.State.StartedAt}}" "$container_id" | xargs date +%s -d
}

function num_of_running_builds() {
    local builds_json
    builds_json="$(curl \
        -s \
        -H "Authorization: Bearer $DRONE_TOKEN" \
        -H "Connection: Close" \
        -H "Host: $DRONE_HOST" \
        -H "User-Agent: Paw/3.1.10 (Macintosh; OS X/10.15.3)" \
        "https://$DRONE_HOST/$DRONE_BUILDS_API_ENDPOINT")"

    echo "$builds_json" | \
        jq '[.[] | select(.repo_id == 16 and .target == '\"$DRONE_BRANCH\"' and .status == "running")] | length'
}

function remote_git() {
    git --git-dir "$REPO_PATH"/.git --work-tree="$REPO_PATH" "$@"
}

function send_slack_message() {
   local color="$2"
   local text="$1"
   local message
   message="\`$DRONE_REPO_NAME/$DRONE_BRANCH\`: $text"

   curl \
       -X "POST" \
       -H 'Content-Type: application/json' \
       -d $'{ "attachments": [ { "color": "'"$color"'", "text": "'"$message"'" } ] }' \
    "$SLACK_HOOK_URL"
}

function update() {
    local git_merge_result
    local local_branch
    local status_result

    # If the repo is dirty, we shouldn't try to deploy:
    if [ -n "$(remote_git status -s)" ]; then
        send_slack_message \
            "ðŸ˜£ Refusing to deploy when the local repo is dirty." \
            "$SLACK_COLOR_YELLOW"
        return 1
    fi

    # If the repo has a branch other than the target one checked out, don't trigger
    # a build:
    local_branch="$(remote_git rev-parse --abbrev-ref HEAD)"
    if [ "$local_branch" != "$DRONE_BRANCH" ]; then
        send_slack_message \
            "ðŸ˜£ Refusing to deploy to unauthorized branch (\`$local_branch\`)." \
            "$SLACK_COLOR_YELLOW"
        return 1
    fi

    # If there are no new changes to the repo, don't trigger a build:
    remote_git fetch
    status_result=$(remote_git status | grep -c "behind" || true)
    if [ "$status_result" -eq "0" ]; then
        send_slack_message \
            "ðŸ˜‘ No new changes to deploy." \
            "$SLACK_COLOR_BLUE"
        return 0
    fi

    # If there is more than one running build, don't keep going (i.e., wait for them
    # to all finish):
    if [[ "$(num_of_running_builds)" -gt "1" ]]; then
        send_slack_message \
            "ðŸ˜´ Waiting for other CI/CD jobs to finish." \
            "$SLACK_COLOR_BLUE"
        return 0
    fi

    # Collect some information about what's changed between the last deployment and now:
    new_commits="$(remote_git --no-pager log --format="â€¢ \`%h\` %s" HEAD...FETCH_HEAD)"
    changed_dirs=$(remote_git diff --name-only HEAD FETCH_HEAD | xargs dirname | cut -d "/" -f1 | uniq)

    # If the merge doesn't go well, abort:
    git_merge_result="$(remote_git merge FETCH_HEAD > /dev/null 2>&1)"
    if [ "$git_merge_result" == "1" ]; then
        send_slack_message \
            "ðŸ˜¢ Git merge failed in local copy of repo." \
            "$SLACK_COLOR_RED"
        return 1
    fi

    send_slack_message \
        "ðŸ˜Ž Deployment started:\n$new_commits" \
        "$SLACK_COLOR_BLUE"

    # Change into the repo's dir so that docker-compose .env works correctly:
    pushd "$REPO_PATH"

    # Clean our HASS refresh tokens:
    "$REPO_PATH/bin/clean-hass-refresh-tokens"

    # Re-build the containers if necessary:
    docker-compose build --pull

    # Track the time right before we bring containers up so we can track which ones weren't
    # created:
    start="$(date +%s)"

    # Bring up the stack, focusing on giving critical services time to start up first:
    docker-compose up -d vernemq
    sleep 5
    docker-compose up -d openzwave
    sleep 5
    docker-compose up -d --remove-orphans

    # Loop through mounted directories in this repo that have changed; if their associated
    # container wasn't rebuilt, restart the container that exists:
    echo "$changed_dirs" | while read -r dir; do
        container_id=$(get_container_id "$dir")
        if [ -z "$container_id" ]; then
            continue
        fi

        container_started_at=$(get_last_started_at "$container_id")
        if [ "$container_started_at" -ge "$start" ]; then
            continue
        fi

        echo "Restarting container with changed volume: $dir"
        docker-compose restart "$dir"
    done

    # Do a final cleanup of unused networks and volumes:
    docker container prune -f
    docker image prune -f
    docker network prune -f
    docker volume prune -f

    # Go back to where we started:
    popd

    send_slack_message \
        "ðŸ¤© Deployment completed!" \
        "$SLACK_COLOR_GREEN"
}

sleep 2
update
