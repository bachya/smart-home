#!/bin/bash
set -euxo pipefail

# Variables to edit when copying this deployment script to other repos:
BRANCH="master"
REPO_NAME="hub"

# Variables that shouldn't need editing:
SLACK_HOOK_URL="https://hooks.slack.com/services/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"
COLOR_BLUE="#1539e0"
COLOR_GREEN="good"
COLOR_RED="danger"
COLOR_YELLOW="warning"

BIN_PATH="$( dirname "$( cd "$(dirname "$0")" ; pwd -P )" )"


function remote_git() {
    git --git-dir "$BIN_PATH"/.git --work-tree="$BIN_PATH" "$@"
}

function send_slack_message() {
   local color="$2"
   local text="$1"
   local message
   message="\`$REPO_NAME/$BRANCH\`: $text"

   curl \
       -X "POST" \
     -H 'Content-Type: application/json' \
     -d $'{ "attachments": [ { "color": "'"$color"'", "text": "'"$message"'" } ] }' \
    "$SLACK_HOOK_URL"
}

function update() {
    local git_pull_result
    local local_branch
    local status_result

    # If there are no new changes to the repo, don't trigger a build:
    remote_git fetch
    status_result=$("$(remote_git status)" | grep -c "behind")
    if [ "$status_result" == 0 ]; then
        send_slack_message "No new changes to deploy" "$COLOR_BLUE"
        return
    fi

    # If the repo has a branch other than the target one checked out, don't trigger
    # a build:
    local_branch="$(remote_git rev-parse --abbrev-ref HEAD)"
    if [ "$local_branch" != "$BRANCH" ]; then
        send_slack_message \
            "Refusing to deploy to local branch: $local_branch" \
            "$COLOR_YELLOW"
        echo "false"
        return
    fi

    # If the hub has a branch other than master checked out, don't trigger a build:
    git_pull_result="$(remote_git pull origin master > /dev/null 2>&1)"
    if [ "$git_pull_result" == "1" ]; then
        send_slack_message \
            "Deployment failed due to failed Git pull on target host" \
            "$COLOR_RED"
        return
    fi

    send_slack_message "Deployment started..." "$COLOR_BLUE"

    "$BIN_PATH"/bin/build

    send_slack_message "Deployment completed" "$COLOR_GREEN"
}

update > /dev/null 2>&1
